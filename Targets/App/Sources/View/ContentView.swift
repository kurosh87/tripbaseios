//
//  ContentView.swift
//  App (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/app
//

import AIKit
import FirebaseKit
import InAppPurchaseKit
import NotifKit
import SharedKit
import SwiftUI
import MapKit
import CoreLocation

// FlightsView Component
struct FlightsView: View {
	var body: some View {
		NavigationStack {
			VStack {
				Text("Map View Coming Soon")
					.font(.title)
					.padding()
				
				Text("We're working on integrating the map view.")
					.foregroundColor(.gray)
			}
			.navigationTitle("Flights")
			.navigationBarTitleDisplayMode(.inline)
			.toolbar {
				ToolbarItem(placement: .navigationBarTrailing) {
					Button(action: {
						// TODO: Implement search
					}) {
						Image(systemName: "magnifyingglass")
					}
				}
			}
		}
	}
}

// Home View Component
struct HomeView: View {
	@State private var selectedDate = Date()
	@State private var hasSchedule = false // Toggle this to see different states
	
	var body: some View {
		NavigationView {
			if hasSchedule {
				// Populated state with schedule
				ScrollView {
					VStack(spacing: 0) {
						// Date selector
						HStack {
							Button(action: { 
								selectedDate = Calendar.current.date(byAdding: .day, value: -1, to: selectedDate) ?? selectedDate 
							}) {
								Image(systemName: "chevron.left")
							}
							
							Text(selectedDate.formatted(date: .complete, time: .omitted))
								.font(.headline)
								.padding()
							
							Button(action: { 
								selectedDate = Calendar.current.date(byAdding: .day, value: 1, to: selectedDate) ?? selectedDate 
							}) {
								Image(systemName: "chevron.right")
							}
						}
						.padding()
						
						// 24-hour timeline
						VStack(spacing: 0) {
							ForEach(0..<24) { hour in
								HourRow(hour: hour)
							}
						}
					}
				}
				.navigationTitle("Schedule")
			} else {
				// Empty state
				VStack(spacing: 30) {
					Spacer()
					
					// Empty state illustration
					VStack(spacing: 15) {
						Image(systemName: "calendar.badge.clock")
							.font(.system(size: 80))
							.foregroundStyle(.blue.gradient)
							.symbolEffect(.bounce)
					}
					.padding(.bottom, 20)
					
					// Empty state message
					VStack(spacing: 12) {
						Text("No Schedule Yet")
							.font(.title2)
							.fontWeight(.semibold)
						
						Text("Add your first flight to see your schedule")
							.font(.body)
							.foregroundColor(.gray)
							.multilineTextAlignment(.center)
					}
					
					// Call to action button
					NavigationLink(destination: FlightsView()) {
						HStack {
							Image(systemName: "plus.circle.fill")
							Text("Add Flight")
						}
						.font(.headline)
						.foregroundColor(.white)
						.frame(maxWidth: 200)
						.padding()
						.background(Color.blue)
						.clipShape(RoundedRectangle(cornerRadius: 15))
					}
					.padding(.top, 20)
					
					Spacer()
				}
				.padding()
				.navigationTitle("Schedule")
			}
		}
	}
}

// Hour row component
struct HourRow: View {
	let hour: Int
	
	var body: some View {
		HStack(alignment: .top) {
			// Time label
			Text(String(format: "%02d:00", hour))
				.font(.caption)
				.frame(width: 50)
				.foregroundColor(.gray)
			
			// Hour content
			VStack {
				Rectangle()
					.fill(Color.gray.opacity(0.2))
					.frame(height: 1)
				
				Rectangle()
					.fill(Color.clear)
					.frame(height: 59)
					.overlay(
						Rectangle()
							.fill(Color.gray.opacity(0.1))
							.frame(height: 1),
						alignment: .bottom
					)
			}
		}
		.frame(height: 60)
	}
}

struct ContentView: View {
	var body: some View {
		TabView {
			// Home screen with calendar
			Tab("Home", systemImage: "house") {
				HomeView()
			}

			// Flights screen with MapKit
			Tab("Flights", systemImage: "airplane") {
				FlightsView()
			}

			// View with AIKit Examples.
			Tab("AIKit Examples", systemImage: "sparkles.rectangle.stack") {
				AIKitExamplesView()
			}

			// Pre-made Settings View for easy native-looking settings screen.
			Tab("Settings", systemImage: "gear") {
				SettingsView()
			}
		}
	}
}

#Preview {
	ContentView()
		.environmentObject(DB())
		.environmentObject(InAppPurchases())
}
