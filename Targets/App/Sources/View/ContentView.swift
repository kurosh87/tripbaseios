//
//  ContentView.swift
//  App (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/app
//
// TripBase - Flight Management Application
//
// This app helps users manage their flights and view their travel schedule.
// Key features include:
// - Interactive map view for flight visualization
// - Schedule management with daily view
// - Location-based services for nearby airports
// - Search functionality (coming soon)

import AIKit
import FirebaseKit
import InAppPurchaseKit
import NotifKit
import SharedKit
import SwiftUI
import MapKit
import CoreLocation
import FirebaseFunctions

/// Manages the user's location services and authorization
/// Provides real-time location updates for the map view
class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {
	private let locationManager = CLLocationManager()
	@Published var location: CLLocation?
	
	override init() {
		super.init()
		locationManager.delegate = self
		locationManager.desiredAccuracy = kCLLocationAccuracyBest
		locationManager.requestWhenInUseAuthorization()
		locationManager.startUpdatingLocation()
	}
	
	func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
		location = locations.last
	}
}

/// Main view for flight management and map visualization
/// Features:
/// - Interactive MapKit integration
/// - User location tracking
/// - Location-based centering
struct FlightsView: View {
	@StateObject private var locationManager = LocationManager()
	@State private var region = MKCoordinateRegion(
		center: CLLocationCoordinate2D(latitude: 37.3346, longitude: -122.0090),
		span: MKCoordinateSpan(latitudeDelta: 0.2, longitudeDelta: 0.2)
	)
	@State private var showingAlert = false
	@State private var alertMessage = ""
	
	// Function to create a sample flight itinerary
	func createSampleItinerary() async {
		do {
			let functions = Functions.functions()
			
			// Sample flight data
			let sampleFlight: [String: Any] = [
				"segments": [[
					"flightNumber": "UA123",
					"airline": [
						"code": "UA",
						"name": "United Airlines"
					],
					"departure": [
						"airport": [
							"code": "SFO",
							"name": "San Francisco International",
							"city": "San Francisco",
							"country": "USA",
							"location": [
								"latitude": 37.7749,
								"longitude": -122.4194
							]
						],
						"scheduledTime": "2024-03-15T10:00:00Z"
					],
					"arrival": [
						"airport": [
							"code": "JFK",
							"name": "John F. Kennedy International",
							"city": "New York",
							"country": "USA",
							"location": [
								"latitude": 40.7128,
								"longitude": -74.0060
							]
						],
						"scheduledTime": "2024-03-15T18:00:00Z"
					],
					"status": "SCHEDULED"
				]],
				"tripName": "Test Flight to NYC"
			]
			
			let result = try await functions.httpsCallable("createFlightItinerary").call(sampleFlight)
			alertMessage = "Flight itinerary created successfully!"
			showingAlert = true
		} catch {
			alertMessage = "Error creating flight: \(error.localizedDescription)"
			showingAlert = true
		}
	}
	
	var body: some View {
		NavigationStack {
			Map(coordinateRegion: $region)
				.ignoresSafeArea(edges: .vertical)
				.overlay(alignment: .bottomTrailing) {
					VStack {
						// Test button for creating sample itinerary
						Button(action: {
							Task {
								await createSampleItinerary()
							}
						}) {
							Label("Add Test Flight", systemImage: "plus.circle.fill")
								.padding()
								.background(Color(.systemBackground))
								.clipShape(Capsule())
								.shadow(radius: 4)
						}
						.padding(.bottom, 8)
						
						// Existing location button
						Button(action: {
							if let location = locationManager.location {
								withAnimation {
									region.center = location.coordinate
								}
							}
						}) {
							Image(systemName: "location.fill")
								.padding()
								.background(Color(.systemBackground))
								.clipShape(Circle())
								.shadow(radius: 4)
						}
					}
					.padding()
				}
				.navigationTitle("Flights")
				.navigationBarTitleDisplayMode(.inline)
				.toolbar {
					ToolbarItem(placement: .navigationBarTrailing) {
						Button(action: {
							// TODO: Implement search
						}) {
							Image(systemName: "magnifyingglass")
						}
					}
				}
				.alert("Flight Itinerary", isPresented: $showingAlert) {
					Button("OK", role: .cancel) { }
				} message: {
					Text(alertMessage)
				}
		}
	}
}

/// Home screen view with schedule management
/// Features:
/// - Daily schedule view
/// - Empty state with onboarding
/// - Date navigation
struct HomeView: View {
	@State private var selectedDate = Date()
	@State private var hasSchedule = false // Toggle this to see different states
	
	var body: some View {
		NavigationView {
			if hasSchedule {
				// Populated state with schedule
				ScrollView {
					VStack(spacing: 0) {
						// Date selector
						HStack {
							Button(action: { 
								selectedDate = Calendar.current.date(byAdding: .day, value: -1, to: selectedDate) ?? selectedDate 
							}) {
								Image(systemName: "chevron.left")
							}
							
							Text(selectedDate.formatted(date: .complete, time: .omitted))
								.font(.headline)
								.padding()
							
							Button(action: { 
								selectedDate = Calendar.current.date(byAdding: .day, value: 1, to: selectedDate) ?? selectedDate 
							}) {
								Image(systemName: "chevron.right")
							}
						}
						.padding()
						
						// 24-hour timeline
						VStack(spacing: 0) {
							ForEach(0..<24) { hour in
								HourRow(hour: hour)
							}
						}
					}
				}
				.navigationTitle("Schedule")
			} else {
				// Empty state
				VStack(spacing: 30) {
					Spacer()
					
					// Empty state illustration
					VStack(spacing: 15) {
						Image(systemName: "calendar.badge.clock")
							.font(.system(size: 80))
							.foregroundStyle(.blue.gradient)
							.symbolEffect(.bounce)
					}
					.padding(.bottom, 20)
					
					// Empty state message
					VStack(spacing: 12) {
						Text("No Schedule Yet")
							.font(.title2)
							.fontWeight(.semibold)
						
						Text("Add your first flight to see your schedule")
							.font(.body)
							.foregroundColor(.gray)
							.multilineTextAlignment(.center)
					}
					
					// Call to action button
					NavigationLink(destination: FlightsView()) {
						HStack {
							Image(systemName: "plus.circle.fill")
							Text("Add Flight")
						}
						.font(.headline)
						.foregroundColor(.white)
						.frame(maxWidth: 200)
						.padding()
						.background(Color.blue)
						.clipShape(RoundedRectangle(cornerRadius: 15))
					}
					.padding(.top, 20)
					
					Spacer()
				}
				.padding()
				.navigationTitle("Schedule")
			}
		}
	}
}

/// Represents a single hour row in the schedule view
/// Used to display flight events in the timeline
struct HourRow: View {
	let hour: Int
	
	var body: some View {
		HStack(alignment: .top) {
			// Time label
			Text(String(format: "%02d:00", hour))
				.font(.caption)
				.frame(width: 50)
				.foregroundColor(.gray)
			
			// Hour content
			VStack {
				Rectangle()
					.fill(Color.gray.opacity(0.2))
					.frame(height: 1)
				
				Rectangle()
					.fill(Color.clear)
					.frame(height: 59)
					.overlay(
						Rectangle()
							.fill(Color.gray.opacity(0.1))
							.frame(height: 1),
						alignment: .bottom
					)
			}
		}
		.frame(height: 60)
	}
}

/// Main container view that manages navigation and tab structure
/// Features:
/// - Tab-based navigation
/// - Persistent bottom bar
/// - Access to key app features
struct ContentView: View {
	var body: some View {
		TabView {
			// Home tab - Schedule management
			Tab("Home", systemImage: "house") {
				HomeView()
			}

			// Flights tab - Map and flight management
			Tab("Flights", systemImage: "airplane") {
				FlightsView()
			}

			// AIKit Examples tab - AI features showcase
			Tab("AIKit Examples", systemImage: "sparkles.rectangle.stack") {
				AIKitExamplesView()
			}

			// Settings tab - App configuration
			Tab("Settings", systemImage: "gear") {
				SettingsView()
			}
		}
		.onAppear {
			// Configure tab bar appearance for consistent UI
			let appearance = UITabBarAppearance()
			appearance.configureWithOpaqueBackground()
			UITabBar.appearance().scrollEdgeAppearance = appearance
			UITabBar.appearance().standardAppearance = appearance
		}
	}
}

/// Preview provider for SwiftUI canvas
/// Includes necessary environment objects for testing
#Preview {
	ContentView()
		.environmentObject(DB())
		.environmentObject(InAppPurchases())
}
