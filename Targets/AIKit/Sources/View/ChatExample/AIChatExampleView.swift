//
//  AIChatExampleView.swift
//  AIKit (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/aikit/ai-chat-example
//

import AnalyticsKit
import FirebaseKit
import SharedKit
import SwiftUI

struct AIChatExampleView: View {

	@EnvironmentObject var db: DB

	@StateObject var vm = AIChatExampleViewModel()

	/// Keep track of the textfield. If in focus -> add additional bottom padding
	@FocusState private var textFieldInFocus: Bool

	/// Pop to root, to close this View
	let popToRoot: () -> Void

	var body: some View {

		VStack(spacing: 0) {

			Group {
				if vm.messages.count > 0 {
					ScrollViewReader { proxy in
						ScrollView {
							ForEach(vm.messages) { message in
								HStack(alignment: .top, spacing: 10) {
									Image(
										systemName: message.isFromUser
											? "person.fill" : "brain"
									)
									.font(.system(size: 12.5))
									.foregroundStyle(Color.white)
									.frame(width: 30, height: 30)
									.background(
										message.isFromUser
											? Color.accentColor.gradient
											: Color.mint.gradient
									)
									.clipShape(Circle())
									.offset(y: -3)

									VStack(alignment: .leading) {
										HStack {
											Text(message.isFromUser ? "You" : "AI")
												.fontWeight(.bold)
												.font(.title3)
											Spacer()
											Text(
												"\(message.timestamp, style: .relative) ago"
											)
											.foregroundStyle(.tertiary)
										}

										// LocalizedStringKey is used so SwiftUI can interprete Markdown
										Text(
											LocalizedStringKey(
												stringLiteral: message
													.messageContent))

									}
									.frame(maxWidth: .infinity, alignment: .leading)
								}
								.padding(.horizontal, 12.5)
								.padding(.vertical)
								.background(
									LinearGradient(
										colors: [
											Color.accentColor.opacity(0.075),
											Color(
												uiColor:
													.secondarySystemBackground
											),
										], startPoint: .topLeading,
										endPoint: .bottomTrailing)
								)
								.clipShape(RoundedRectangle(cornerRadius: 25, style: .continuous))
								.overlay {
									RoundedRectangle(cornerRadius: 25, style: .continuous)
										.stroke(.tertiary, lineWidth: 0.5)
								}
								.padding(.horizontal, 10)

							}

							// New message -> scroll to the bottom
							.onChange(of: vm.messages.count) {
								withAnimation(.spring()) {
									proxy.scrollTo(vm.messages[vm.messages.count - 1].id)
								}
							}

							// Keyboard in focus -> wait a bit and scroll to the bottom
							.onChange(of: textFieldInFocus) {
								if textFieldInFocus {
									Task {
										try? await Task.sleep(for: .seconds(0.35))
										withAnimation(.spring()) {
											proxy.scrollTo(
												vm.messages[vm.messages.count - 1]
													.id)
										}
									}
								}
							}

							if vm.fetching {
								ProgressView()
									.scaleEffect(1.5)
									.padding(.vertical, 10)
							}

						}
						.frame(maxWidth: .infinity, maxHeight: .infinity)

						// View is visible -> wait a bit and scroll to the bottom
						.onAppear {
							Task {
								try? await Task.sleep(for: .seconds(0.35))
								withAnimation(.easeInOut) {
									proxy.scrollTo(vm.messages[vm.messages.count - 1].id)
								}
							}
						}

						.refreshable {
							Task {
								await vm.fetchAIChatMessagesFromDB(db: db)
							}
						}
					}
				} else {
					VStack {
						if vm.fetching {
							ProgressView()
								.scaleEffect(1.5)
						} else {
							VStack {
								Image(systemName: "brain")
									.font(.system(size: 75, weight: .semibold))
									.foregroundStyle(.secondary)
									.padding(.bottom, 5)

								Text("No messages")
									.font(.largeTitle)
									.fontWeight(.bold)
									.foregroundStyle(.secondary)
								Text("Start the conversation by sending a new message")
									.font(.caption)
									.foregroundStyle(.tertiary)
							}
						}
					}
					.frame(maxWidth: .infinity, maxHeight: .infinity)
				}
			}
			.onTapGesture {
				textFieldInFocus = false
			}

			HStack {
				TextField("What is the meaning of life?", text: $vm.newMessage)
					.textFieldStyle(CommonTextField())
					.focused($textFieldInFocus)
					.disabled(vm.fetching)
					.opacity(vm.fetching ? 0.5 : 1)
					.onSubmit {
						Task {
							textFieldInFocus = true
							await vm.sendNewAIChatMessage(db: db)
						}
					}

				Button("Send", systemImage: "arrow.up") {
					Task {
						textFieldInFocus = true
						await vm.sendNewAIChatMessage(db: db)
					}
				}
				.font(.title2)
				.fontWeight(.semibold)
				.labelStyle(.iconOnly)
				.frame(width: 50, height: 50)
				.background(Color.accentColor)
				.foregroundStyle(Color.white)
				.clipShape(RoundedRectangle(cornerRadius: 10, style: .continuous))
				.disabled(vm.newMessage.isEmpty || vm.fetching)
				.hoverEffect()
			}
			.padding(.horizontal)
			.padding(.vertical, 10)
		}
		.navigationTitle("Chat Example")
		.navigationBarTitleDisplayMode(.inline)
		.toolbar(.hidden, for: .tabBar)  // hide the bottom tab bar
		.toolbar {
			ToolbarItem(placement: .navigationBarTrailing) {
				if !vm.messages.isEmpty {
					Button("Reset") {
						Task {
							await vm.deleteChatHistory(db: db)
						}
					}
					.disabled(vm.fetching)
				}
			}
		}
		.onAppear {
			Task {
				await vm.fetchAIChatMessagesFromDB(db: db)
			}
		}
		.requireLogin(db: db, onCancel: popToRoot)
		.captureViewActivity(as: "AIChatExampleView")

	}
}

#Preview {
	NavigationStack {
		AIChatExampleView(popToRoot: {})
	}
	.environmentObject(DB())
}
