//
//  BackendFunctionsExampleView.swift
//  BackendKit (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/backendkit
//

import SwiftUI
import FirebaseFirestore

struct BackendFunctionsExampleView: View {

	@EnvironmentObject var db: DB
	@State private var users: [FetchedUser] = []
	@State private var userPreferences: [String: UserPreferences] = [:]  // Store preferences by user ID

	init() {}

	func setupPreferencesListener(for userId: String) {
		Firestore.firestore().collection("userPreferences").document(userId)
			.addSnapshotListener { documentSnapshot, error in
				guard let document = documentSnapshot else {
					print("Error fetching preferences: \(error?.localizedDescription ?? "Unknown error")")
					return
				}
				
				if let data = document.data() {
					userPreferences[userId] = UserPreferences(
						wakeUpTime: data["wakeUpTime"] as? String ?? "07:00",
						bedTime: data["bedTime"] as? String ?? "23:00",
						useMelatonin: data["useMelatonin"] as? Bool ?? false,
						melatoninDosage: data["melatoninDosage"] as? Int,
						chronotype: data["chronotype"] as? String ?? "INTERMEDIATE",
						caffeineSensitivity: data["caffeineSensitivity"] as? String ?? "MEDIUM",
						maxDailyCaffeine: data["maxDailyCaffeine"] as? Int,
						lastUpdated: data["lastUpdated"] as? String ?? "",
						userId: userId
					)
				}
			}
	}

	var body: some View {
		VStack {
			if users.isEmpty {
				Button("Fetch Users") {
					Task {
						users = await db.fetchAllBackendUsers()
						// Set up listeners for all users
						for user in users {
							setupPreferencesListener(for: user.userID)
						}
					}
				}
			} else {
				List {
					ForEach(users, id: \.userID) { user in
						Section(footer: Text("User ID: \(user.userID)")) {
							HStack {
								Text(user.username)
									.fontWeight(.semibold)
								Spacer()
								if user.userID == db.currentUser?.uid {
									Text("YOU")
										.fontWeight(.bold)
										.padding(.vertical, 2.5)
										.padding(.horizontal, 5)
										.background(Color.accentColor.gradient)
										.foregroundStyle(.white)
										.clipShape(
											RoundedRectangle(
												cornerRadius: 7.5,
												style: .continuous))
								}
							}
							Text("Posts Created")
								.badge("\(user.postsCreated)")

							Text("Premium Status")
								.badge(user.userHasPremium ? "Has Premium, yay!" : "No Premium")

							// User Preferences
							if let prefs = userPreferences[user.userID] {
								Group {
									HStack {
										Text("Sleep Schedule")
										Spacer()
										Text("\(prefs.wakeUpTime) - \(prefs.bedTime)")
											.foregroundStyle(.secondary)
									}
									
									HStack {
										Text("Sleep Type")
										Spacer()
										Text(prefs.chronotype.capitalized)
											.foregroundStyle(.secondary)
									}
									
									HStack {
										Text("Melatonin Use")
										Spacer()
										if prefs.useMelatonin {
											if let dose = prefs.melatoninDosage {
												Text("\(dose)mg")
											} else {
												Text("Yes")
											}
										} else {
											Text("No")
										}
									}
									
									HStack {
										Text("Caffeine Sensitivity")
										Spacer()
										Text(prefs.caffeineSensitivity)
											.foregroundStyle(.secondary)
									}
									
									if let maxCaffeine = prefs.maxDailyCaffeine {
										HStack {
											Text("Max Daily Caffeine")
											Spacer()
											Text("\(maxCaffeine)mg")
												.foregroundStyle(.secondary)
										}
									}
								}
							}

							SendNotificationButton(userID: user.userID)
						}
					}
				}
				.refreshable {
					users = await db.fetchAllBackendUsers()
				}
			}
		}
		.navigationTitle("All Users (From Backend)")
		.onAppear {
			Task {
				users = await db.fetchAllBackendUsers()
				// Set up listeners for all users
				for user in users {
					setupPreferencesListener(for: user.userID)
				}
			}
		}

	}
}

struct SendNotificationButton: View {

	@EnvironmentObject var db: DB
	@State var showMessageInputAlert = false

	@State var notifMessage = "Hello there!"

	let userID: String

	var body: some View {
		Button(
			action: {
				showMessageInputAlert = true
			},
			label: {
				Label(
					title: { Text("Send Notification") },
					icon: { Image(systemName: "bell.fill") }
				)
			}
		)
		.alert("Enter your Message", isPresented: $showMessageInputAlert) {
			TextField("Your Message", text: $notifMessage)
			Button("OK") {
				Task {
					await db.executeIfSignedIn(otherwise: .showInAppNotification) {
						await db.sendNotificationTo(userID: userID, message: notifMessage)
					}
				}
			}
			.disabled(notifMessage.isEmpty)

			Button("Cancel", role: .cancel) {
				notifMessage = "Hello there!"
			}
			.buttonStyle(.borderless)
		}

	}
}

// Helper struct to parse UserPreferences
struct UserPreferences {
	let wakeUpTime: String
	let bedTime: String
	let useMelatonin: Bool
	let melatoninDosage: Int?
	let chronotype: String
	let caffeineSensitivity: String
	let maxDailyCaffeine: Int?
	let lastUpdated: String
	let userId: String
}
